import cv2
import numpy as np
import sys

inputImage = cv2.imread(sys.argv[1])

imageGray = cv2.cvtColor(inputImage, cv2.COLOR_BGR2GRAY)

# Binarize using adaptive thresholding
imageBinarized = cv2.adaptiveThreshold(imageGray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 99, 2)

imageWidth = len(imageBinarized[0])
imageHeight = len(imageBinarized)

print('imageWidth: ' + str(imageWidth))
print('imageHeight: ' + str(imageHeight))

# Begin connected-component labeling algorithm
disjointSet = []

for row in range(0,imageHeight):
	for column in range(0,imageWidth):
		# If current cell is not a background pixel
		if (imageBinarized[row][column] != 0):
			# Find values of west and north neighbour pixels to current pixel
			neighbours = {'west':0, 'north':0}

			if (column != 0):
				neighbours['west'] = imageBinarized[row][column-1]
			if (row != 0):
				neighbours['north'] = imageBinarized[row-1][column]
			if ((neighbours['west'] == 0) and (neighbours['north'] == 0)):
				# Place pixel in new set
				disjointSet.append(set([(row,column)]))
			elif (neighbours['north'] == 0):
				# Only west is foreground so add pixel to same set as pixel to the west
				findSet((row,column-1),disjointSet).add((row,column))
			elif (neighbours['west'] == 0):
				# Only north is foreground so add pixel to same set as pixel to the north
				findSet((row-1,column),disjointSet).add((row,column))
			else:
				# Both north and west are foreground. Add pixel to west set and union the two sets if they are not the same
				westSet = findSet((row,column-1),disjointSet)
				northSet = findSet((row-1,column),disjointSet)

				if (cmp(westSet,northSet) == 0):
					unioned = westSet.union(northSet)
					unioned.add((row,column))
					disjointSet.remove(westSet)
					disjointSet.remove(northSet)
					disjointSet.append(unioned)
				else:
					westSet.add((row,column))

print disjointSet

# findSet takes an item and a disjoint set (represented as a list of sets) and returns the set that the item is present in. Returns None if the item cannot be found
def findSet(item, setList):
	for listItem in setList:
		for element in listItem:
			if (cmp(item,element) == 0):
				return listItem
	return None
